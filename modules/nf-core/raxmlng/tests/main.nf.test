nextflow_process {
    name "Test Process RAXMLNG"
    script "../main.nf"
    process "RAXMLNG"
    tag "modules"
    tag "modules_nfcore"
    tag "raxmlng"

    test("raxmlng - main") {
        when {
            process {
                """
                // alignment fasta file is required
                input[0] = [
                [ id:'test' ], // meta map with id
                file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/alignment/informative_sites.fas', checkIfExists: true), // alignment fasta
                'GTR+G' // model
                ]
                """
            }

        }

        then {
            assertAll (
                { assert process.success },
                // Check phylogeny output (tuple: meta, path)
                { assert process.out.phylogeny.size() == 1 },
                { assert process.out.phylogeny[0][0].id == 'test' }, // Check meta.id passed through
                { assert process.out.phylogeny[0][1].toString().endsWith(".raxml.bestTree") },
                { assert process.out.phylogeny[0][1].toString().contains("test") }, // Check if prefix 'test' was used
                // Check optional bootstrapped output (should be empty)
                { assert process.out.phylogeny_bootstrapped.isEmpty() },
                // Check versions
                { assert process.out.versions.size() == 1 },
                { assert process.out.versions[0].toString().endsWith("versions.yml") },
                { assert snapshot(process.out.versions[0]).match("versions_yml") } // Snapshot specific file
            )
        }
    }


    test("raxmlng - stub - no bootstrap") {
    options "-stub"

        when {
            process {
                """
                input[0] = [
                            [ id:'test_stub' ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/alignment/informative_sites.fas', checkIfExists: true), // alignment file path
                            'GTR+G' // model string
                        ]
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                // This will show phylogeny and versions, but not phylogeny_bootstrapped
                { assert snapshot(process.out).match() }
            )
        }
    }


        test("raxmlng - stub - with bootstrap") {
        options "-stub"
        when {
            params {
                module_args = '--bootstrap'
            }
            process {
            """
            input[0] = [
                [ id:'test_bootstrap' ], // meta map
                file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/alignment/informative_sites.fas', checkIfExists: true), // alignment file path
                'GTR+G' // model string
            ]
            """
            }
        }
        then {
            assertAll (
            { assert process.success },
            { assert snapshot(process.out).match("stub_with_bootstrap") }
            )
        }
    }
}